name: Laravel CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        dependency-version: [prefer-lowest, prefer-stable]

    name: PHP ${{ matrix.php-version }} - ${{ matrix.dependency-version }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache/files
        key: dependencies-php-${{ matrix.php-version }}-composer-${{ hashFiles('composer.json') }}
        restore-keys: |
          dependencies-php-${{ matrix.php-version }}-composer-

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, mysql, pdo_mysql
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer Dependencies
      run: composer install --${{ matrix.dependency-version }} --no-ansi --no-interaction --no-scripts --no-progress --optimize-autoloader

    - name: Install NPM Dependencies (if package.json exists)
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi

    - name: Generate Application Key
      run: php artisan key:generate

    - name: Set Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create SQLite Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Clear Config Cache
      run: php artisan config:clear

    - name: Run Database Migrations (SQLite)
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan migrate --force

    - name: Build Assets (if build script exists)
      run: |
        if [ -f package.json ] && npm run --silent build 2>/dev/null; then
          npm run build
        else
          echo "No build script found or no package.json, skipping asset build"
        fi

    - name: Execute Tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test --coverage --coverage-clover=coverage.xml

    - name: Upload coverage reports to Codecov
      if: matrix.php-version == '8.3' && matrix.dependency-version == 'prefer-stable'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Security Checker
      run: composer audit

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run PHP CS Fixer (Code Style)
      run: |
        if ! composer show friendsofphp/php-cs-fixer > /dev/null 2>&1; then
          composer require --dev friendsofphp/php-cs-fixer
        fi
        vendor/bin/php-cs-fixer fix --dry-run --diff --allow-risky=yes

    - name: Run PHPStan (Static Analysis)
      run: |
        if ! composer show phpstan/phpstan > /dev/null 2>&1; then
          composer require --dev phpstan/phpstan
        fi
        vendor/bin/phpstan analyse --memory-limit=2G --no-progress
